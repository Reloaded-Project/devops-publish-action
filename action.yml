name: 'Reloaded Publish Action'
description: 'Publish artifacts from other GitHub Actions'
author: 'Reloaded Project'
branding:
  icon: 'package'
  color: 'red'

inputs:
  nuget-api-key:
    description: 'NuGet API key for publishing packages'
    required: false
  crates-io-token:
    description: 'Crates.io token for publishing Rust packages'
    required: false
  rust-project-paths:
    description: 'List of paths to Rust projects (standalone projects)'
    required: false
    default: ''
  cargo-workspace-projects:
    description: 'List of specific projects to publish from a Cargo workspace (project names, not paths)'
    required: false
    default: ''
  artifacts-directory:
    description: 'Path to the directory containing the uncompressed artifacts'
    required: false
    default: 'artifacts'
  compressed-artifacts-directory:
    description: 'Path to the directory containing the compressed artifacts'
    required: false
    default: 'compressed-artifacts'
  additional-publish-params:
    description: 'Additional parameters for cargo publish (e.g., --dry-run)'
    required: false
    default: ''
  create-release:
    description: 'Whether the artifacts should by uploaded to GitHub releases.'
    required: false
    default: 'true'
  checkout-current-repo:
    description: 'Checks out the current repository.'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      if: inputs.checkout-current-repo == 'true'
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: ${{ inputs.artifacts-directory }}

    - name: Upload to NuGet
      if: inputs.nuget-api-key != ''
      shell: pwsh
      run: |
        $items = Get-ChildItem -Path "${{ inputs.artifacts-directory }}/**.nupkg" -Recurse
        Foreach ($item in $items)
        {
            Write-Host "Pushing $item"
            dotnet nuget push "$item" -k "${{ inputs.nuget-api-key }}" -s "https://api.nuget.org/v3/index.json" --skip-duplicate
        }

        $items = Get-ChildItem -Path "${{ inputs.artifacts-directory }}/**.snupkg" -Recurse
        Foreach ($item in $items)
        {
            Write-Host "Pushing Symbol Package $item"
            dotnet nuget push "$item" -k "${{ inputs.nuget-api-key }}" -s "https://api.nuget.org/v3/index.json" --skip-duplicate
        }

    - name: Compress artifacts
      shell: bash
      run: |
        dir="${{ inputs.artifacts-directory }}"
        compressed_dir="${{ inputs.compressed-artifacts-directory }}"
        mkdir -p "$compressed_dir"

        if [ ! -d "$dir" ]; then
          echo "Directory $dir does not exist. No artifacts found."
          exit 0
        fi

        for subdir in "$dir"/*; do
          if [ -d "$subdir" ]; then
            base=$(basename "$subdir")
            zip -r "$compressed_dir/$base.zip" "$subdir"
          fi
        done
        ls -A ./$compressed_dir

    - name: Create GitHub release
      if: inputs.create-release == 'true'
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ${{ inputs.compressed-artifacts-directory }}/*

    - name: Publish standalone Rust projects to crates.io
      if: inputs.crates-io-token != '' && inputs.rust-project-paths != ''
      shell: bash
      run: |
        # Trim whitespace and handle empty lines
        echo "${{ inputs.rust-project-paths }}" | while read -r path || [[ -n "$path" ]]; do
          # Skip empty lines
          if [[ -z "$path" ]]; then
            continue
          fi
          
          # Trim whitespace
          path=$(echo "$path" | xargs)
          
          echo "Publishing standalone Rust package at path: $path"
          cargo publish --token "${{ inputs.crates-io-token }}" ${{ inputs.additional-publish-params }} --manifest-path "$path/Cargo.toml"
        done

    - name: Publish Cargo workspace projects to crates.io
      if: inputs.crates-io-token != '' && inputs.cargo-workspace-projects != ''
      shell: bash
      run: |
        # Trim whitespace and handle empty lines
        echo "${{ inputs.cargo-workspace-projects }}" | while read -r project || [[ -n "$project" ]]; do
          # Skip empty lines
          if [[ -z "$project" ]]; then
            continue
          fi
          
          # Trim whitespace
          project=$(echo "$project" | xargs)
          
          echo "Publishing workspace project: $project"
          cargo publish --token "${{ inputs.crates-io-token }}" ${{ inputs.additional-publish-params }} -p "$project"
        done